// This file has been generated by Py++.

#include "boost/python.hpp"

#include "__call_policies.pypp.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "../FileReader.h"

#include "../Attribute.h"

namespace bp = boost::python;

static void setAttributeValue_026a714fc9d83f5c47bcd4c31cfc1e39( ::ccmc::Attribute & inst, ::std::string value ){
    inst.setAttributeValue(value);
}

static void setAttributeValue_9de35cd4d4fdab084214c87dc7152c41( ::ccmc::Attribute & inst, int value ){
    inst.setAttributeValue(value);
}

static void setAttributeValue_a075b9dceae47e213b817cfb8e836fe0( ::ccmc::Attribute & inst, float value ){
    inst.setAttributeValue(value);
}

struct FileReader_wrapper : ccmc::FileReader, bp::wrapper< ccmc::FileReader > {

    FileReader_wrapper( )
    : ccmc::FileReader( )
      , bp::wrapper< ccmc::FileReader >(){
        // null constructor
    
    }

    virtual long int closeFile(  ){
        bp::override func_closeFile = this->get_override( "closeFile" );
        return func_closeFile(  );
    }

    virtual bool doesAttributeExist( ::std::string const & attribute ){
        bp::override func_doesAttributeExist = this->get_override( "doesAttributeExist" );
        return func_doesAttributeExist( attribute );
    }

    virtual bool doesVariableExist( ::std::string const & variable ){
        bp::override func_doesVariableExist = this->get_override( "doesVariableExist" );
        return func_doesVariableExist( variable );
    }

    virtual ::ccmc::Attribute getGlobalAttribute( long int i ){
        bp::override func_getGlobalAttribute = this->get_override( "getGlobalAttribute" );
        return func_getGlobalAttribute( i );
    }

    virtual ::ccmc::Attribute getGlobalAttribute( ::std::string const & attribute ){
        bp::override func_getGlobalAttribute = this->get_override( "getGlobalAttribute" );
        return func_getGlobalAttribute( attribute );
    }

    virtual long int getGlobalAttributeID( ::std::string const & attribute ){
        bp::override func_getGlobalAttributeID = this->get_override( "getGlobalAttributeID" );
        return func_getGlobalAttributeID( attribute );
    }

    virtual ::std::string getGlobalAttributeName( long int attribute_id ){
        bp::override func_getGlobalAttributeName = this->get_override( "getGlobalAttributeName" );
        return func_getGlobalAttributeName( attribute_id );
    }

    virtual int getNumberOfGlobalAttributes(  ){
        bp::override func_getNumberOfGlobalAttributes = this->get_override( "getNumberOfGlobalAttributes" );
        return func_getNumberOfGlobalAttributes(  );
    }

    virtual long int getNumberOfRecords( ::std::string const & variable ){
        bp::override func_getNumberOfRecords = this->get_override( "getNumberOfRecords" );
        return func_getNumberOfRecords( variable );
    }

    virtual long int getNumberOfRecords( long int variable_id ){
        bp::override func_getNumberOfRecords = this->get_override( "getNumberOfRecords" );
        return func_getNumberOfRecords( variable_id );
    }

    virtual int getNumberOfVariableAttributes(  ){
        bp::override func_getNumberOfVariableAttributes = this->get_override( "getNumberOfVariableAttributes" );
        return func_getNumberOfVariableAttributes(  );
    }

    virtual int getNumberOfVariables(  ){
        bp::override func_getNumberOfVariables = this->get_override( "getNumberOfVariables" );
        return func_getNumberOfVariables(  );
    }

    virtual ::std::vector< float > * getVariable( ::std::string const & variable ){
        bp::override func_getVariable = this->get_override( "getVariable" );
        return func_getVariable( variable );
    }

    virtual ::std::vector< float > * getVariable( long int variableID ){
        bp::override func_getVariable = this->get_override( "getVariable" );
        return func_getVariable( variableID );
    }

    virtual ::std::vector< float > * getVariable( ::std::string const & variable, long int startIndex, long int count ){
        bp::override func_getVariable = this->get_override( "getVariable" );
        return func_getVariable( variable, startIndex, count );
    }

    virtual ::std::vector< float > * getVariable( long int variableID, long int startIndex, long int count ){
        bp::override func_getVariable = this->get_override( "getVariable" );
        return func_getVariable( variableID, startIndex, count );
    }

    virtual float getVariableAtIndex( ::std::string const & variable, long int index ){
        bp::override func_getVariableAtIndex = this->get_override( "getVariableAtIndex" );
        return func_getVariableAtIndex( variable, index );
    }

    virtual float getVariableAtIndex( long int variable_id, long int index ){
        bp::override func_getVariableAtIndex = this->get_override( "getVariableAtIndex" );
        return func_getVariableAtIndex( variable_id, index );
    }

    virtual ::ccmc::Attribute getVariableAttribute( ::std::string const & variable, ::std::string const & attribute ){
        bp::override func_getVariableAttribute = this->get_override( "getVariableAttribute" );
        return func_getVariableAttribute( variable, attribute );
    }

    virtual ::std::string getVariableAttributeName( long int attribute_id ){
        bp::override func_getVariableAttributeName = this->get_override( "getVariableAttributeName" );
        return func_getVariableAttributeName( attribute_id );
    }

    virtual ::std::vector< std::string > getVariableAttributeNames(  ){
        bp::override func_getVariableAttributeNames = this->get_override( "getVariableAttributeNames" );
        return func_getVariableAttributeNames(  );
    }

    virtual long int getVariableID( ::std::string const & variable ){
        bp::override func_getVariableID = this->get_override( "getVariableID" );
        return func_getVariableID( variable );
    }

    virtual ::std::vector< int > * getVariableInt( ::std::string const & variable ){
        bp::override func_getVariableInt = this->get_override( "getVariableInt" );
        return func_getVariableInt( variable );
    }

    virtual int getVariableIntAtIndex( ::std::string const & variable, long int index ){
        bp::override func_getVariableIntAtIndex = this->get_override( "getVariableIntAtIndex" );
        return func_getVariableIntAtIndex( variable, index );
    }

    virtual ::std::string getVariableName( long int variable_id ){
        bp::override func_getVariableName = this->get_override( "getVariableName" );
        return func_getVariableName( variable_id );
    }

    void initializeGlobalAttributes(  ){
        ccmc::FileReader::initializeGlobalAttributes(  );
    }

    void initializeVariableAttributes(  ){
        ccmc::FileReader::initializeVariableAttributes(  );
    }

    virtual void initializeVariableIDs(  ){
        bp::override func_initializeVariableIDs = this->get_override( "initializeVariableIDs" );
        func_initializeVariableIDs(  );
    }

    virtual void initializeVariableNames(  ){
        bp::override func_initializeVariableNames = this->get_override( "initializeVariableNames" );
        func_initializeVariableNames(  );
    }

    virtual long int openFile( ::std::string const & filename, bool readonly ){
        bp::override func_openFile = this->get_override( "openFile" );
        return func_openFile( filename, readonly );
    }

    virtual ::std::string const & getCurrentFilename(  ){
            	return this->current_filename;
    	    }

};

BOOST_PYTHON_MODULE(pyKameleon){
    bp::class_< std::vector< std::string > >("vectorString")    
        .def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );

    bp::class_< std::vector< int > >("vectorInt")    
        .def( bp::vector_indexing_suite< ::std::vector< int >, true >() );

    bp::class_< std::vector< float > >("vectorFloat")    
        .def( bp::vector_indexing_suite< ::std::vector< float >, true >() );

    { //::ccmc::Attribute
        typedef bp::class_< ccmc::Attribute > Attribute_exposer_t;
        Attribute_exposer_t Attribute_exposer = Attribute_exposer_t( "Attribute", bp::init< >() );
        bp::scope Attribute_scope( Attribute_exposer );
        bp::enum_< ccmc::Attribute::AttributeType>("AttributeType")
            .value("FLOAT", ccmc::Attribute::FLOAT)
            .value("INT", ccmc::Attribute::INT)
            .value("STRING", ccmc::Attribute::STRING)
            .export_values()
            ;
        { //::ccmc::Attribute::getAttributeFloat
        
            typedef float ( ::ccmc::Attribute::*getAttributeFloat_function_type )(  ) ;
            
            Attribute_exposer.def( 
                "getAttributeFloat"
                , getAttributeFloat_function_type( &::ccmc::Attribute::getAttributeFloat ) );
        
        }
        { //::ccmc::Attribute::getAttributeInt
        
            typedef int ( ::ccmc::Attribute::*getAttributeInt_function_type )(  ) ;
            
            Attribute_exposer.def( 
                "getAttributeInt"
                , getAttributeInt_function_type( &::ccmc::Attribute::getAttributeInt ) );
        
        }
        { //::ccmc::Attribute::getAttributeName
        
            typedef ::std::string ( ::ccmc::Attribute::*getAttributeName_function_type )(  ) ;
            
            Attribute_exposer.def( 
                "getAttributeName"
                , getAttributeName_function_type( &::ccmc::Attribute::getAttributeName ) );
        
        }
        { //::ccmc::Attribute::getAttributeString
        
            typedef ::std::string ( ::ccmc::Attribute::*getAttributeString_function_type )(  ) ;
            
            Attribute_exposer.def( 
                "getAttributeString"
                , getAttributeString_function_type( &::ccmc::Attribute::getAttributeString ) );
        
        }
        { //::ccmc::Attribute::getAttributeType
        
            typedef ::ccmc::Attribute::AttributeType ( ::ccmc::Attribute::*getAttributeType_function_type )(  ) ;
            
            Attribute_exposer.def( 
                "getAttributeType"
                , getAttributeType_function_type( &::ccmc::Attribute::getAttributeType ) );
        
        }
        { //::ccmc::Attribute::setAttributeName
        
            typedef void ( ::ccmc::Attribute::*setAttributeName_function_type )( ::std::string ) ;
            
            Attribute_exposer.def( 
                "setAttributeName"
                , setAttributeName_function_type( &::ccmc::Attribute::setAttributeName )
                , ( bp::arg("attributeName") ) );
        
        }
        { //::ccmc::Attribute::setAttributeValue
        
            typedef void ( *setAttrStr_function_type )( ::ccmc::Attribute &,::std::basic_string<char,std::char_traits<char>,std::allocator<char> > );
            
            Attribute_exposer.def( 
                "setAttrStr"
                , setAttrStr_function_type( &setAttributeValue_026a714fc9d83f5c47bcd4c31cfc1e39 )
                , ( bp::arg("inst"), bp::arg("value") ) );
        
        }
        { //::ccmc::Attribute::setAttributeValue
        
            typedef void ( *setAttrInt_function_type )( ::ccmc::Attribute &,int );
            
            Attribute_exposer.def( 
                "setAttrInt"
                , setAttrInt_function_type( &setAttributeValue_9de35cd4d4fdab084214c87dc7152c41 )
                , ( bp::arg("inst"), bp::arg("value") ) );
        
        }
        { //::ccmc::Attribute::setAttributeValue
        
            typedef void ( *setAttrFloat_function_type )( ::ccmc::Attribute &,float );
            
            Attribute_exposer.def( 
                "setAttrFloat"
                , setAttrFloat_function_type( &setAttributeValue_a075b9dceae47e213b817cfb8e836fe0 )
                , ( bp::arg("inst"), bp::arg("value") ) );
        
        }
        { //::ccmc::Attribute::toString
        
            typedef ::std::string ( ::ccmc::Attribute::*toString_function_type )(  ) const;
            
            Attribute_exposer.def( 
                "toString"
                , toString_function_type( &::ccmc::Attribute::toString ) );
        
        }
        { //property "attributeName"[fget=::ccmc::Attribute::getAttributeName, fset=::ccmc::Attribute::setAttributeName]
        
            typedef ::std::string ( ::ccmc::Attribute::*fget )(  ) ;
            typedef void ( ::ccmc::Attribute::*fset )( ::std::string ) ;
            
            Attribute_exposer.add_property( 
                "attributeName"
                , fget( &::ccmc::Attribute::getAttributeName )
                , fset( &::ccmc::Attribute::setAttributeName ) );
        
        }
        { //property "sValue"[fget=::ccmc::Attribute::getAttributeString, fset=::ccmc::Attribute::setAttributeValue]
        
            typedef ::std::string ( ::ccmc::Attribute::*fget )(  ) ;
            typedef void ( ::ccmc::Attribute::*fset )( ::std::string & ) ;
            
            Attribute_exposer.add_property( 
                "sValue"
                , fget( &::ccmc::Attribute::getAttributeString )
                , fset( &::ccmc::Attribute::setAttributeValue ) );
        
        }
        { //property "iValue"[fget=::ccmc::Attribute::getAttributeInt, fset=::ccmc::Attribute::setAttributeValue]
        
            typedef int ( ::ccmc::Attribute::*fget )(  ) ;
            typedef void ( ::ccmc::Attribute::*fset )( int & ) ;
            
            Attribute_exposer.add_property( 
                "iValue"
                , fget( &::ccmc::Attribute::getAttributeInt )
                , fset( &::ccmc::Attribute::setAttributeValue ) );
        
        }
        { //property "fValue"[fget=::ccmc::Attribute::getAttributeFloat, fset=::ccmc::Attribute::setAttributeValue]
        
            typedef float ( ::ccmc::Attribute::*fget )(  ) ;
            typedef void ( ::ccmc::Attribute::*fset )( float & ) ;
            
            Attribute_exposer.add_property( 
                "fValue"
                , fget( &::ccmc::Attribute::getAttributeFloat )
                , fset( &::ccmc::Attribute::setAttributeValue ) );
        
        }
        { //property "type"[fget=::ccmc::Attribute::getAttributeType]
        
            typedef ::ccmc::Attribute::AttributeType ( ::ccmc::Attribute::*fget )(  ) ;
            
            Attribute_exposer.add_property( 
                "type"
                , fget( &::ccmc::Attribute::getAttributeType ) );
        
        }
    }

    { //::ccmc::FileReader
        typedef bp::class_< FileReader_wrapper, boost::noncopyable > FileReader_exposer_t;
        FileReader_exposer_t FileReader_exposer = FileReader_exposer_t( "FileReader", bp::init< >() );
        bp::scope FileReader_scope( FileReader_exposer );
        { //::ccmc::FileReader::addVariableName
        
            typedef void ( ::ccmc::FileReader::*addVariableName_function_type )( ::std::string const &,long int ) ;
            
            FileReader_exposer.def( 
                "addVariableName"
                , addVariableName_function_type( &::ccmc::FileReader::addVariableName )
                , ( bp::arg("variable"), bp::arg("id") ) );
        
        }
        { //::ccmc::FileReader::close
        
            typedef long int ( ::ccmc::FileReader::*close_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "close"
                , close_function_type( &::ccmc::FileReader::close ) );
        
        }
        { //::ccmc::FileReader::closeFile
        
            typedef long int ( ::ccmc::FileReader::*closeFile_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "closeFile"
                , bp::pure_virtual( closeFile_function_type(&::ccmc::FileReader::closeFile) ) );
        
        }
        { //::ccmc::FileReader::doesAttributeExist
        
            typedef bool ( ::ccmc::FileReader::*doesAttributeExist_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "doesAttributeExist"
                , bp::pure_virtual( doesAttributeExist_function_type(&::ccmc::FileReader::doesAttributeExist) )
                , ( bp::arg("attribute") ) );
        
        }
        { //::ccmc::FileReader::doesVariableExist
        
            typedef bool ( ::ccmc::FileReader::*doesVariableExist_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "doesVariableExist"
                , bp::pure_virtual( doesVariableExist_function_type(&::ccmc::FileReader::doesVariableExist) )
                , ( bp::arg("variable") ) );
        
        }
        { //::ccmc::FileReader::getGlobalAttribute
        
            typedef ::ccmc::Attribute ( ::ccmc::FileReader::*getGlobalAttribute_function_type )( long int ) ;
            
            FileReader_exposer.def( 
                "getGlobalAttribute"
                , bp::pure_virtual( getGlobalAttribute_function_type(&::ccmc::FileReader::getGlobalAttribute) )
                , ( bp::arg("i") ) );
        
        }
        { //::ccmc::FileReader::getGlobalAttribute
        
            typedef ::ccmc::Attribute ( ::ccmc::FileReader::*getGlobalAttribute_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getGlobalAttribute"
                , bp::pure_virtual( getGlobalAttribute_function_type(&::ccmc::FileReader::getGlobalAttribute) )
                , ( bp::arg("attribute") ) );
        
        }
        { //::ccmc::FileReader::getGlobalAttributeID
        
            typedef long int ( ::ccmc::FileReader::*getGlobalAttributeID_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getGlobalAttributeID"
                , bp::pure_virtual( getGlobalAttributeID_function_type(&::ccmc::FileReader::getGlobalAttributeID) )
                , ( bp::arg("attribute") ) );
        
        }
        { //::ccmc::FileReader::getGlobalAttributeName
        
            typedef ::std::string ( ::ccmc::FileReader::*getGlobalAttributeName_function_type )( long int ) ;
            
            FileReader_exposer.def( 
                "getGlobalAttributeName"
                , bp::pure_virtual( getGlobalAttributeName_function_type(&::ccmc::FileReader::getGlobalAttributeName) )
                , ( bp::arg("attribute_id") ) );
        
        }
        { //::ccmc::FileReader::getNumberOfGlobalAttributes
        
            typedef int ( ::ccmc::FileReader::*getNumberOfGlobalAttributes_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "getNumberOfGlobalAttributes"
                , bp::pure_virtual( getNumberOfGlobalAttributes_function_type(&::ccmc::FileReader::getNumberOfGlobalAttributes) ) );
        
        }
        { //::ccmc::FileReader::getNumberOfRecords
        
            typedef long int ( ::ccmc::FileReader::*getNumberOfRecords_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getNumberOfRecords"
                , bp::pure_virtual( getNumberOfRecords_function_type(&::ccmc::FileReader::getNumberOfRecords) )
                , ( bp::arg("variable") ) );
        
        }
        { //::ccmc::FileReader::getNumberOfRecords
        
            typedef long int ( ::ccmc::FileReader::*getNumberOfRecords_function_type )( long int ) ;
            
            FileReader_exposer.def( 
                "getNumberOfRecords"
                , bp::pure_virtual( getNumberOfRecords_function_type(&::ccmc::FileReader::getNumberOfRecords) )
                , ( bp::arg("variable_id") ) );
        
        }
        { //::ccmc::FileReader::getNumberOfVariableAttributes
        
            typedef int ( ::ccmc::FileReader::*getNumberOfVariableAttributes_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "getNumberOfVariableAttributes"
                , bp::pure_virtual( getNumberOfVariableAttributes_function_type(&::ccmc::FileReader::getNumberOfVariableAttributes) ) );
        
        }
        { //::ccmc::FileReader::getNumberOfVariables
        
            typedef int ( ::ccmc::FileReader::*getNumberOfVariables_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "getNumberOfVariables"
                , bp::pure_virtual( getNumberOfVariables_function_type(&::ccmc::FileReader::getNumberOfVariables) ) );
        
        }
        { //::ccmc::FileReader::getVariable
        
            typedef ::std::vector<float,std::allocator<float> > * ( ::ccmc::FileReader::*getVariable_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getVariable"
                , bp::pure_virtual( getVariable_function_type(&::ccmc::FileReader::getVariable) )
                , ( bp::arg("variable") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ccmc::FileReader::getVariable
        
            typedef ::std::vector<float,std::allocator<float> > * ( ::ccmc::FileReader::*getVariable_function_type )( long int ) ;
            
            FileReader_exposer.def( 
                "getVariable"
                , bp::pure_virtual( getVariable_function_type(&::ccmc::FileReader::getVariable) )
                , ( bp::arg("variableID") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ccmc::FileReader::getVariable
        
            typedef ::std::vector<float,std::allocator<float> > * ( ::ccmc::FileReader::*getVariable_function_type )( ::std::string const &,long int,long int ) ;
            
            FileReader_exposer.def( 
                "getVariable"
                , bp::pure_virtual( getVariable_function_type(&::ccmc::FileReader::getVariable) )
                , ( bp::arg("variable"), bp::arg("startIndex"), bp::arg("count") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ccmc::FileReader::getVariable
        
            typedef ::std::vector<float,std::allocator<float> > * ( ::ccmc::FileReader::*getVariable_function_type )( long int,long int,long int ) ;
            
            FileReader_exposer.def( 
                "getVariable"
                , bp::pure_virtual( getVariable_function_type(&::ccmc::FileReader::getVariable) )
                , ( bp::arg("variableID"), bp::arg("startIndex"), bp::arg("count") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ccmc::FileReader::getVariableAtIndex
        
            typedef float ( ::ccmc::FileReader::*getVariableAtIndex_function_type )( ::std::string const &,long int ) ;
            
            FileReader_exposer.def( 
                "getVariableAtIndex"
                , bp::pure_virtual( getVariableAtIndex_function_type(&::ccmc::FileReader::getVariableAtIndex) )
                , ( bp::arg("variable"), bp::arg("index") ) );
        
        }
        { //::ccmc::FileReader::getVariableAtIndex
        
            typedef float ( ::ccmc::FileReader::*getVariableAtIndex_function_type )( long int,long int ) ;
            
            FileReader_exposer.def( 
                "getVariableAtIndex"
                , bp::pure_virtual( getVariableAtIndex_function_type(&::ccmc::FileReader::getVariableAtIndex) )
                , ( bp::arg("variable_id"), bp::arg("index") ) );
        
        }
        { //::ccmc::FileReader::getVariableAttribute
        
            typedef ::ccmc::Attribute ( ::ccmc::FileReader::*getVariableAttribute_function_type )( ::std::string const &,::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getVariableAttribute"
                , bp::pure_virtual( getVariableAttribute_function_type(&::ccmc::FileReader::getVariableAttribute) )
                , ( bp::arg("variable"), bp::arg("attribute") ) );
        
        }
        { //::ccmc::FileReader::getVariableAttributeName
        
            typedef ::std::string ( ::ccmc::FileReader::*getVariableAttributeName_function_type )( long int ) ;
            
            FileReader_exposer.def( 
                "getVariableAttributeName"
                , bp::pure_virtual( getVariableAttributeName_function_type(&::ccmc::FileReader::getVariableAttributeName) )
                , ( bp::arg("attribute_id") ) );
        
        }
        { //::ccmc::FileReader::getVariableAttributeNames
        
            typedef ::std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > ( ::ccmc::FileReader::*getVariableAttributeNames_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "getVariableAttributeNames"
                , bp::pure_virtual( getVariableAttributeNames_function_type(&::ccmc::FileReader::getVariableAttributeNames) ) );
        
        }
        { //::ccmc::FileReader::getVariableID
        
            typedef long int ( ::ccmc::FileReader::*getVariableID_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getVariableID"
                , bp::pure_virtual( getVariableID_function_type(&::ccmc::FileReader::getVariableID) )
                , ( bp::arg("variable") ) );
        
        }
        { //::ccmc::FileReader::getVariableInt
        
            typedef ::std::vector<int,std::allocator<int> > * ( ::ccmc::FileReader::*getVariableInt_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "getVariableInt"
                , bp::pure_virtual( getVariableInt_function_type(&::ccmc::FileReader::getVariableInt) )
                , ( bp::arg("variable") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ccmc::FileReader::getVariableIntAtIndex
        
            typedef int ( ::ccmc::FileReader::*getVariableIntAtIndex_function_type )( ::std::string const &,long int ) ;
            
            FileReader_exposer.def( 
                "getVariableIntAtIndex"
                , bp::pure_virtual( getVariableIntAtIndex_function_type(&::ccmc::FileReader::getVariableIntAtIndex) )
                , ( bp::arg("variable"), bp::arg("index") ) );
        
        }
        { //::ccmc::FileReader::getVariableName
        
            typedef ::std::string ( ::ccmc::FileReader::*getVariableName_function_type )( long int ) ;
            
            FileReader_exposer.def( 
                "getVariableName"
                , bp::pure_virtual( getVariableName_function_type(&::ccmc::FileReader::getVariableName) )
                , ( bp::arg("variable_id") ) );
        
        }
        { //::ccmc::FileReader::initializeGlobalAttributes
        
            typedef void ( FileReader_wrapper::*initializeGlobalAttributes_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "initializeGlobalAttributes"
                , initializeGlobalAttributes_function_type( &FileReader_wrapper::initializeGlobalAttributes ) );
        
        }
        { //::ccmc::FileReader::initializeVariableAttributes
        
            typedef void ( FileReader_wrapper::*initializeVariableAttributes_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "initializeVariableAttributes"
                , initializeVariableAttributes_function_type( &FileReader_wrapper::initializeVariableAttributes ) );
        
        }
        { //::ccmc::FileReader::initializeVariableIDs
        
            typedef void ( ::ccmc::FileReader::*initializeVariableIDs_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "initializeVariableIDs"
                , bp::pure_virtual( initializeVariableIDs_function_type(&::ccmc::FileReader::initializeVariableIDs) ) );
        
        }
        { //::ccmc::FileReader::initializeVariableNames
        
            typedef void ( ::ccmc::FileReader::*initializeVariableNames_function_type )(  ) ;
            
            FileReader_exposer.def( 
                "initializeVariableNames"
                , bp::pure_virtual( initializeVariableNames_function_type(&::ccmc::FileReader::initializeVariableNames) ) );
        
        }
        { //::ccmc::FileReader::open
        
            typedef long int ( ::ccmc::FileReader::*open_function_type )( ::std::string const &,bool ) ;
            
            FileReader_exposer.def( 
                "open"
                , open_function_type( &::ccmc::FileReader::open )
                , ( bp::arg("filename"), bp::arg("readonly")=(bool)(true) ) );
        
        }
        { //::ccmc::FileReader::openFile
        
            typedef long int ( ::ccmc::FileReader::*openFile_function_type )( ::std::string const &,bool ) ;
            
            FileReader_exposer.def( 
                "openFile"
                , bp::pure_virtual( openFile_function_type(&::ccmc::FileReader::openFile) )
                , ( bp::arg("filename"), bp::arg("readonly") ) );
        
        }
        { //::ccmc::FileReader::setCurrentFilename
        
            typedef void ( ::ccmc::FileReader::*setCurrentFilename_function_type )( ::std::string const & ) ;
            
            FileReader_exposer.def( 
                "setCurrentFilename"
                , setCurrentFilename_function_type( &::ccmc::FileReader::setCurrentFilename )
                , ( bp::arg("filename") ) );
        
        }
        FileReader_exposer.def_readonly( "ATTRIBUTE_DOES_NOT_EXIST", ccmc::FileReader::ATTRIBUTE_DOES_NOT_EXIST );
        FileReader_exposer.def_readonly( "FILE_DOES_NOT_EXIST", ccmc::FileReader::FILE_DOES_NOT_EXIST );
        FileReader_exposer.def_readonly( "LOAD_FAILED", ccmc::FileReader::LOAD_FAILED );
        FileReader_exposer.def_readonly( "MODEL_NOT_SUPPORTED", ccmc::FileReader::MODEL_NOT_SUPPORTED );
        FileReader_exposer.def_readonly( "NOT_A_VALID_KAMELEON_FILE", ccmc::FileReader::NOT_A_VALID_KAMELEON_FILE );
        FileReader_exposer.def_readonly( "OK", ccmc::FileReader::OK );
        FileReader_exposer.def_readonly( "OPEN_ERROR", ccmc::FileReader::OPEN_ERROR );
        FileReader_exposer.def_readonly( "UNABLE_TO_ALLOCATE_MEMORY", ccmc::FileReader::UNABLE_TO_ALLOCATE_MEMORY );
        FileReader_exposer.def_readonly( "VARIABLE_DOES_NOT_EXIST", ccmc::FileReader::VARIABLE_DOES_NOT_EXIST );
        FileReader_exposer.def_readonly( "VARIABLE_NOT_IN_MEMORY", ccmc::FileReader::VARIABLE_NOT_IN_MEMORY );
        { //property "current_filename"[fget=::ccmc::FileReader::getCurrentFilename, fset=::ccmc::FileReader::setCurrentFilename]
        
            typedef ::std::string const & ( ::ccmc::FileReader::*fget )(  ) ;
            typedef void ( ::ccmc::FileReader::*fset )( ::std::string const & ) ;
            
            FileReader_exposer.add_property( 
                "current_filename"
                , bp::make_function( 
                      fget( &::ccmc::FileReader::getCurrentFilename )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::ccmc::FileReader::setCurrentFilename ) );
        
        }
    }
}
